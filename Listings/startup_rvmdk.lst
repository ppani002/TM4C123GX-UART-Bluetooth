


ARM Macro Assembler    Page 1 


    1 00000000         ; <<< Use Configuration Wizard in Context Menu >>>
    2 00000000         ;*******************************************************
                       ***********************
    3 00000000         ;
    4 00000000         ; startup_rvmdk.S - Startup code for use with Keil's uVi
                       sion.
    5 00000000         ;
    6 00000000         ; Copyright (c) 2012-2017 Texas Instruments Incorporated
                       .  All rights reserved.
    7 00000000         ; Software License Agreement
    8 00000000         ; 
    9 00000000         ; Texas Instruments (TI) is supplying this software for 
                       use solely and
   10 00000000         ; exclusively on TI's microcontroller products. The soft
                       ware is owned by
   11 00000000         ; TI and/or its suppliers, and is protected under applic
                       able copyright
   12 00000000         ; laws. You may not combine this software with "viral" o
                       pen-source
   13 00000000         ; software in order to form a larger program.
   14 00000000         ; 
   15 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
                       
   16 00000000         ; NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, 
                       INCLUDING, BUT
   17 00000000         ; NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY 
                       AND FITNESS FOR
   18 00000000         ; A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL 
                       NOT, UNDER ANY
   19 00000000         ; CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR C
                       ONSEQUENTIAL
   20 00000000         ; DAMAGES, FOR ANY REASON WHATSOEVER.
   21 00000000         ; 
   22 00000000         ; This is part of revision 2.1.4.178 of the EK-TM4C123GX
                       L Firmware Package.
   23 00000000         ;
   24 00000000         ;*******************************************************
                       ***********************
   25 00000000         
   26 00000000         ;*******************************************************
                       ***********************
   27 00000000         ;
   28 00000000         ; <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   29 00000000         ;
   30 00000000         ;*******************************************************
                       ***********************
   31 00000000 00000200 
                       Stack   EQU              0x00000200
   32 00000000         
   33 00000000         ;*******************************************************
                       ***********************
   34 00000000         ;
   35 00000000         ; <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   36 00000000         ;
   37 00000000         ;*******************************************************
                       ***********************
   38 00000000 00000000 
                       Heap    EQU              0x00000000
   39 00000000         



ARM Macro Assembler    Page 2 


   40 00000000         ;*******************************************************
                       ***********************
   41 00000000         ;
   42 00000000         ; Allocate space for the stack.
   43 00000000         ;
   44 00000000         ;*******************************************************
                       ***********************
   45 00000000         
   46 00000000         ;includes constants I define to startup file
   47 00000000                 INCLUDE          my_Constants.s
    1 00000000                 AREA             My_Constants, CODE, READONLY
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;defining addresses here for practice
    5 00000000         
    6 00000000         ;general base addresses
    7 00000000 40059000 
                       AHB_PORTB
                               EQU              0x40059000
    8 00000000 40058000 
                       AHB_PORTA
                               EQU              0x40058000
    9 00000000 400FE000 
                       SYS_CONTROL
                               EQU              0x400FE000
   10 00000000 E000E000 
                       SYS_PERIPH
                               EQU              0xE000E000
   11 00000000 40030000 
                       TIMER16_0
                               EQU              0x40030000
   12 00000000 40034000 
                       TIMER16_4
                               EQU              0x40034000
   13 00000000 4000C000 
                       UART0   EQU              0x4000C000
   14 00000000 4000D000 
                       UART1   EQU              0x4000D000
   15 00000000         
   16 00000000         ;offsets
   17 00000000         ;RCGC Run-time offsets
   18 00000000 00000608 
                       RCGCGPIO
                               EQU              0x608
   19 00000000 00000604 
                       RCGCTIMER
                               EQU              0x604
   20 00000000 00000618 
                       RCGCUART
                               EQU              0x618
   21 00000000         ;GPIO offsets
   22 00000000 0000006C 
                       GPIOHBCTL
                               EQU              0x06C
   23 00000000 0000052C 
                       GPIOCTL EQU              0x52C
   24 00000000 00000400 
                       GPIODIR EQU              0X400
   25 00000000 00000420 



ARM Macro Assembler    Page 3 


                       GPIOAFSEL
                               EQU              0X420
   26 00000000 00000500 
                       GPIODR2R
                               EQU              0X500
   27 00000000 00000510 
                       GPIOPUR EQU              0X510
   28 00000000 0000051C 
                       GPIODEN EQU              0X51C
   29 00000000 0000052C 
                       GPIOPCTL
                               EQU              0x52C
   30 00000000 00000080 
                       GPIODATAPB5
                               EQU              0x080       ; 0x3FC
   31 00000000         ;SysTick offsets
   32 00000000 00000010 
                       STCTRL  EQU              0X010
   33 00000000 00000014 
                       STRELOAD
                               EQU              0X014
   34 00000000 00000018 
                       STCURRENT
                               EQU              0X018
   35 00000000 00000D20 
                       SYSPRI3 EQU              0XD20
   36 00000000         ;NVIC offsets
   37 00000000 00000100 
                       NVIC_ENn
                               EQU              0x100
   38 00000000 00000180 
                       NVIC_DISn
                               EQU              0x180
   39 00000000 00000440 
                       NVIC_PRIn
                               EQU              0x440
   40 00000000         ;Timer offsets
   41 00000000 0000000C 
                       GPTMCTL EQU              0x00C
   42 00000000 00000000 
                       GPTMCFG EQU              0x000
   43 00000000 00000004 
                       GPTMTAMR
                               EQU              0x004
   44 00000000 00000008 
                       GPTMTBMR
                               EQU              0x008
   45 00000000 00000028 
                       GPTMTAILR
                               EQU              0x028
   46 00000000 0000002C 
                       GPTMTBILR
                               EQU              0x02C
   47 00000000 00000038 
                       GPTMTAPR
                               EQU              0x038
   48 00000000 0000003C 
                       GPTMTBPR
                               EQU              0x03C



ARM Macro Assembler    Page 4 


   49 00000000 00000018 
                       GPTMIMR EQU              0x018
   50 00000000 0000001C 
                       GPTMRIS EQU              0x01C
   51 00000000 00000024 
                       GPTMICR EQU              0x024
   52 00000000 00000050 
                       GPTMTAV EQU              0X050
   53 00000000 00000054 
                       GPTMTBV EQU              0x054
   54 00000000 00000048 
                       GPTMTAR EQU              0x048
   55 00000000 0000004C 
                       GPTMTBR EQU              0x04C
   56 00000000 00000020 
                       GPTMMIS EQU              0x020
   57 00000000         ;UART offsets
   58 00000000 00000FC8 
                       UARTCC  EQU              0xFC8
   59 00000000 00000030 
                       UARTCTL EQU              0x030
   60 00000000 00000024 
                       UARTIBRD
                               EQU              0x024
   61 00000000 00000028 
                       UARTFBRD
                               EQU              0x028
   62 00000000 0000002C 
                       UARTLCRH
                               EQU              0x02C
   63 00000000 00000018 
                       UARTFR  EQU              0x018
   64 00000000 00000004 
                       UARTRSR EQU              0x004
   65 00000000 00000034 
                       UARTIFLS
                               EQU              0x034
   66 00000000 0000003C 
                       UARTRIS EQU              0x03C
   67 00000000 00000038 
                       UARTIM  EQU              0x038
   68 00000000 00000040 
                       UARTMIS EQU              0x040
   69 00000000 00000044 
                       UARTICR EQU              0x044
   70 00000000 00000000 
                       UARTDR  EQU              0x000
   71 00000000         
   72 00000000         ;FIFO constants
   73 00000000         ;ALIGN 2
   74 00000000 00000010 
                       SIZE    EQU              16
   75 00000000 00000001 
                       SUCCESS EQU              1
   76 00000000 00000000 
                       FAIL    EQU              0
   77 00000000         
   78 00000000         ;GPIODATA Toggle bits
   79 00000000 00000020 



ARM Macro Assembler    Page 5 


                       GPIOP5  EQU              0x20
   80 00000000         
   81 00000000                 END
   48 00000000         ;includes functions I define
   49 00000000         ;INCLUDE my_Subroutines.s
   50 00000000         ;Include variables I define to startup file
   51 00000000                 IMPORT           PB5_MASK
   52 00000000         ;IMPORT TxPutI
   53 00000000         ;IMPORT TxGetI
   54 00000000         ;IMPORT TxFifo
   55 00000000         ;IMPORT RxPutI
   56 00000000         ;IMPORT RxGetI
   57 00000000         ;IMPORT RxFifo
   58 00000000         
   59 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   60 00000000         StackMem
   61 00000000                 SPACE            Stack
   62 00000200         __initial_sp
   63 00000200         
   64 00000200         ;*******************************************************
                       ***********************
   65 00000200         ;
   66 00000200         ; Allocate space for the heap.
   67 00000200         ;
   68 00000200         ;*******************************************************
                       ***********************
   69 00000200                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   70 00000000         __heap_base
   71 00000000         HeapMem
   72 00000000                 SPACE            Heap
   73 00000000         __heap_limit
   74 00000000         
   75 00000000         ;*******************************************************
                       ***********************
   76 00000000         ;
   77 00000000         ; Indicate that the code in this file preserves 8-byte a
                       lignment of the stack.
   78 00000000         ;
   79 00000000         ;*******************************************************
                       ***********************
   80 00000000                 PRESERVE8
   81 00000000         
   82 00000000         ;*******************************************************
                       ***********************
   83 00000000         ;
   84 00000000         ; Place code into the reset code section.
   85 00000000         ;
   86 00000000         ;*******************************************************
                       ***********************
   87 00000000                 AREA             RESET, CODE, READONLY
   88 00000000                 THUMB
   89 00000000         
   90 00000000         ;*******************************************************
                       ***********************
   91 00000000         ;
   92 00000000         ; The vector table.
   93 00000000         ;



ARM Macro Assembler    Page 6 


   94 00000000         ;*******************************************************
                       ***********************
   95 00000000                 EXPORT           __Vectors
   96 00000000         __Vectors
   97 00000000 00000200        DCD              StackMem + Stack ; Top of Stack
                                                            
   98 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   99 00000008 00000000        DCD              NmiSR       ; NMI Handler
  100 0000000C 00000000        DCD              FaultISR    ; Hard Fault Handle
                                                            r
  101 00000010 00000000        DCD              IntDefaultHandler ; The MPU fau
                                                            lt handler
  102 00000014 00000000        DCD              IntDefaultHandler ; The bus fau
                                                            lt handler
  103 00000018 00000000        DCD              IntDefaultHandler ; The usage f
                                                            ault handler
  104 0000001C 00000000        DCD              0           ; Reserved
  105 00000020 00000000        DCD              0           ; Reserved
  106 00000024 00000000        DCD              0           ; Reserved
  107 00000028 00000000        DCD              0           ; Reserved
  108 0000002C 00000000        DCD              IntDefaultHandler 
                                                            ; SVCall handler
  109 00000030 00000000        DCD              IntDefaultHandler ; Debug monit
                                                            or handler
  110 00000034 00000000        DCD              0           ; Reserved
  111 00000038 00000000        DCD              IntDefaultHandler ; The PendSV 
                                                            handler
  112 0000003C 00000000        DCD              SysTick_Handler ; The SysTick h
                                                            andler
  113 00000040 00000000        DCD              IntDefaultHandler ; GPIO Port A
                                                            
  114 00000044 00000000        DCD              IntDefaultHandler ; GPIO Port B
                                                            
  115 00000048 00000000        DCD              IntDefaultHandler ; GPIO Port C
                                                            
  116 0000004C 00000000        DCD              IntDefaultHandler ; GPIO Port D
                                                            
  117 00000050 00000000        DCD              IntDefaultHandler ; GPIO Port E
                                                            
  118 00000054 00000000        DCD              UART0_Handler ; UART0 Rx and Tx
                                                            
  119 00000058 00000000        DCD              UART1_Handler ; UART1 Rx and Tx
                                                            
  120 0000005C 00000000        DCD              IntDefaultHandler 
                                                            ; SSI0 Rx and Tx
  121 00000060 00000000        DCD              IntDefaultHandler ; I2C0 Master
                                                             and Slave
  122 00000064 00000000        DCD              IntDefaultHandler ; PWM Fault
  123 00000068 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 0
  124 0000006C 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 1
  125 00000070 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 2
  126 00000074 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 0
  127 00000078 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 0
  128 0000007C 00000000        DCD              IntDefaultHandler 



ARM Macro Assembler    Page 7 


                                                            ; ADC Sequence 1
  129 00000080 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 2
  130 00000084 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 3
  131 00000088 00000000        DCD              IntDefaultHandler 
                                                            ; Watchdog timer
  132 0000008C 00000000        DCD              Timer0A_Handler ; Timer 0 subti
                                                            mer A
  133 00000090 00000000        DCD              IntDefaultHandler ; Timer 0 sub
                                                            timer B
  134 00000094 00000000        DCD              IntDefaultHandler ; Timer 1 sub
                                                            timer A
  135 00000098 00000000        DCD              IntDefaultHandler ; Timer 1 sub
                                                            timer B
  136 0000009C 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer A
  137 000000A0 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer B
  138 000000A4 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 0
  139 000000A8 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 1
  140 000000AC 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 2
  141 000000B0 00000000        DCD              IntDefaultHandler ; System Cont
                                                            rol (PLL, OSC, BO)
  142 000000B4 00000000        DCD              IntDefaultHandler 
                                                            ; FLASH Control
  143 000000B8 00000000        DCD              IntDefaultHandler ; GPIO Port F
                                                            
  144 000000BC 00000000        DCD              IntDefaultHandler ; GPIO Port G
                                                            
  145 000000C0 00000000        DCD              IntDefaultHandler ; GPIO Port H
                                                            
  146 000000C4 00000000        DCD              IntDefaultHandler 
                                                            ; UART2 Rx and Tx
  147 000000C8 00000000        DCD              IntDefaultHandler 
                                                            ; SSI1 Rx and Tx
  148 000000CC 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer A
  149 000000D0 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer B
  150 000000D4 00000000        DCD              IntDefaultHandler ; I2C1 Master
                                                             and Slave
  151 000000D8 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 1
  152 000000DC 00000000        DCD              IntDefaultHandler ; CAN0
  153 000000E0 00000000        DCD              IntDefaultHandler ; CAN1
  154 000000E4 00000000        DCD              0           ; Reserved
  155 000000E8 00000000        DCD              0           ; Reserved
  156 000000EC 00000000        DCD              IntDefaultHandler ; Hibernate
  157 000000F0 00000000        DCD              IntDefaultHandler ; USB0
  158 000000F4 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 3
  159 000000F8 00000000        DCD              IntDefaultHandler ; uDMA Softwa
                                                            re Transfer
  160 000000FC 00000000        DCD              IntDefaultHandler ; uDMA Error
  161 00000100 00000000        DCD              IntDefaultHandler 



ARM Macro Assembler    Page 8 


                                                            ; ADC1 Sequence 0
  162 00000104 00000000        DCD              IntDefaultHandler 
                                                            ; ADC1 Sequence 1
  163 00000108 00000000        DCD              IntDefaultHandler 
                                                            ; ADC1 Sequence 2
  164 0000010C 00000000        DCD              IntDefaultHandler 
                                                            ; ADC1 Sequence 3
  165 00000110 00000000        DCD              0           ; Reserved
  166 00000114 00000000        DCD              0           ; Reserved
  167 00000118 00000000        DCD              IntDefaultHandler ; GPIO Port J
                                                            
  168 0000011C 00000000        DCD              IntDefaultHandler ; GPIO Port K
                                                            
  169 00000120 00000000        DCD              IntDefaultHandler ; GPIO Port L
                                                            
  170 00000124 00000000        DCD              IntDefaultHandler 
                                                            ; SSI2 Rx and Tx
  171 00000128 00000000        DCD              IntDefaultHandler 
                                                            ; SSI3 Rx and Tx
  172 0000012C 00000000        DCD              IntDefaultHandler 
                                                            ; UART3 Rx and Tx
  173 00000130 00000000        DCD              IntDefaultHandler 
                                                            ; UART4 Rx and Tx
  174 00000134 00000000        DCD              IntDefaultHandler 
                                                            ; UART5 Rx and Tx
  175 00000138 00000000        DCD              IntDefaultHandler 
                                                            ; UART6 Rx and Tx
  176 0000013C 00000000        DCD              IntDefaultHandler 
                                                            ; UART7 Rx and Tx
  177 00000140 00000000        DCD              0           ; Reserved
  178 00000144 00000000        DCD              0           ; Reserved
  179 00000148 00000000        DCD              0           ; Reserved
  180 0000014C 00000000        DCD              0           ; Reserved
  181 00000150 00000000        DCD              IntDefaultHandler ; I2C2 Master
                                                             and Slave
  182 00000154 00000000        DCD              IntDefaultHandler ; I2C3 Master
                                                             and Slave
  183 00000158 00000000        DCD              Timer4A_Handler ; Timer 4 subti
                                                            mer A
  184 0000015C 00000000        DCD              Timer4B_Handler ; Timer 4 subti
                                                            mer B
  185 00000160 00000000        DCD              0           ; Reserved
  186 00000164 00000000        DCD              0           ; Reserved
  187 00000168 00000000        DCD              0           ; Reserved
  188 0000016C 00000000        DCD              0           ; Reserved
  189 00000170 00000000        DCD              0           ; Reserved
  190 00000174 00000000        DCD              0           ; Reserved
  191 00000178 00000000        DCD              0           ; Reserved
  192 0000017C 00000000        DCD              0           ; Reserved
  193 00000180 00000000        DCD              0           ; Reserved
  194 00000184 00000000        DCD              0           ; Reserved
  195 00000188 00000000        DCD              0           ; Reserved
  196 0000018C 00000000        DCD              0           ; Reserved
  197 00000190 00000000        DCD              0           ; Reserved
  198 00000194 00000000        DCD              0           ; Reserved
  199 00000198 00000000        DCD              0           ; Reserved
  200 0000019C 00000000        DCD              0           ; Reserved
  201 000001A0 00000000        DCD              0           ; Reserved
  202 000001A4 00000000        DCD              0           ; Reserved



ARM Macro Assembler    Page 9 


  203 000001A8 00000000        DCD              0           ; Reserved
  204 000001AC 00000000        DCD              0           ; Reserved
  205 000001B0 00000000        DCD              IntDefaultHandler ; Timer 5 sub
                                                            timer A
  206 000001B4 00000000        DCD              IntDefaultHandler ; Timer 5 sub
                                                            timer B
  207 000001B8 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            0 subtimer A
  208 000001BC 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            0 subtimer B
  209 000001C0 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            1 subtimer A
  210 000001C4 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            1 subtimer B
  211 000001C8 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            2 subtimer A
  212 000001CC 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            2 subtimer B
  213 000001D0 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            3 subtimer A
  214 000001D4 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            3 subtimer B
  215 000001D8 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            4 subtimer A
  216 000001DC 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            4 subtimer B
  217 000001E0 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            5 subtimer A
  218 000001E4 00000000        DCD              IntDefaultHandler ; Wide Timer 
                                                            5 subtimer B
  219 000001E8 00000000        DCD              IntDefaultHandler ; FPU
  220 000001EC 00000000        DCD              0           ; Reserved
  221 000001F0 00000000        DCD              0           ; Reserved
  222 000001F4 00000000        DCD              IntDefaultHandler ; I2C4 Master
                                                             and Slave
  223 000001F8 00000000        DCD              IntDefaultHandler ; I2C5 Master
                                                             and Slave
  224 000001FC 00000000        DCD              IntDefaultHandler ; GPIO Port M
                                                            
  225 00000200 00000000        DCD              IntDefaultHandler ; GPIO Port N
                                                            
  226 00000204 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 2
  227 00000208 00000000        DCD              0           ; Reserved
  228 0000020C 00000000        DCD              0           ; Reserved
  229 00000210 00000000        DCD              IntDefaultHandler ; GPIO Port P
                                                             (Summary or P0)
  230 00000214 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port P1
  231 00000218 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port P2
  232 0000021C 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port P3
  233 00000220 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port P4
  234 00000224 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port P5
  235 00000228 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port P6



ARM Macro Assembler    Page 10 


  236 0000022C 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port P7
  237 00000230 00000000        DCD              IntDefaultHandler ; GPIO Port Q
                                                             (Summary or Q0)
  238 00000234 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port Q1
  239 00000238 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port Q2
  240 0000023C 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port Q3
  241 00000240 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port Q4
  242 00000244 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port Q5
  243 00000248 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port Q6
  244 0000024C 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port Q7
  245 00000250 00000000        DCD              IntDefaultHandler ; GPIO Port R
                                                            
  246 00000254 00000000        DCD              IntDefaultHandler ; GPIO Port S
                                                            
  247 00000258 00000000        DCD              IntDefaultHandler 
                                                            ; PWM 1 Generator 0
                                                            
  248 0000025C 00000000        DCD              IntDefaultHandler 
                                                            ; PWM 1 Generator 1
                                                            
  249 00000260 00000000        DCD              IntDefaultHandler 
                                                            ; PWM 1 Generator 2
                                                            
  250 00000264 00000000        DCD              IntDefaultHandler 
                                                            ; PWM 1 Generator 3
                                                            
  251 00000268 00000000        DCD              IntDefaultHandler ; PWM 1 Fault
                                                            
  252 0000026C         
  253 0000026C         ;*******************************************************
                       ***********************
  254 0000026C         ;
  255 0000026C         ; This is the code that gets called when the processor f
                       irst starts execution
  256 0000026C         ; following a reset event.
  257 0000026C         ;
  258 0000026C         ;*******************************************************
                       ***********************
  259 0000026C                 EXPORT           Reset_Handler
  260 0000026C         Reset_Handler
  261 0000026C         ;
  262 0000026C         ; Enable the floating-point unit.  This must be done her
                       e to handle the
  263 0000026C         ; case where main() uses floating-point and the function
                        prologue saves
  264 0000026C         ; floating-point registers (which will fault if floating
                       -point is not
  265 0000026C         ; enabled).  Any configuration of the floating-point uni
                       t using
  266 0000026C         ; DriverLib APIs must be done here prior to the floating
                       -point unit



ARM Macro Assembler    Page 11 


  267 0000026C         ; being enabled.
  268 0000026C         ;
  269 0000026C         ; Note that this does not use DriverLib since it might n
                       ot be included
  270 0000026C         ; in this project.
  271 0000026C         ;
  272 0000026C F64E 5088       MOVW             R0, #0xED88
  273 00000270 F2CE 0000       MOVT             R0, #0xE000
  274 00000274 6801            LDR              R1, [R0]
  275 00000276 F441 0170       ORR              R1, #0x00F00000
  276 0000027A 6001            STR              R1, [R0]
  277 0000027C         
  278 0000027C         ;
  279 0000027C         ; Call the C library enty point that handles startup.  T
                       his will copy
  280 0000027C         ; the .data section initializers from flash to SRAM and 
                       zero fill the
  281 0000027C         ; .bss section.
  282 0000027C         ;
  283 0000027C         
  284 0000027C         
  285 0000027C         ;Setting up RAM myself here
  286 0000027C 4A69            LDR              r2, =PB5_MASK ;get RAM address 
                                                            of PB5 mask (pointe
                                                            r)
  287 0000027E 6813            LDR              r3,[r2]     ;get the value of P
                                                            B5 mask
  288 00000280         
  289 00000280         ;I'm getting trash data this RAM address. Clearing and p
                       roperly setting to ONLY 0xF0
  290 00000280 F36F 031F       BFC              r3,#0,#32
  291 00000284         
  292 00000284 F043 0320       ORR              r3, r3, #0x20 ;#0xF0
  293 00000288 6013            STR              r3,[r2]
  294 0000028A         
  295 0000028A                 IMPORT           __main
  296 0000028A F7FF BFFE       B                __main
  297 0000028E         
  298 0000028E         ;*******************************************************
                       ***********************
  299 0000028E         ;
  300 0000028E         ; This is the code that gets called when the processor r
                       eceives a NMI.  This
  301 0000028E         ; simply enters an infinite loop, preserving the system 
                       state for examination
  302 0000028E         ; by a debugger.
  303 0000028E         ;
  304 0000028E         ;*******************************************************
                       ***********************
  305 0000028E         NmiSR
  306 0000028E E7FE            B                NmiSR
  307 00000290         
  308 00000290         ;*******************************************************
                       ***********************
  309 00000290         ;
  310 00000290         ; This is the code that gets called when the processor r
                       eceives a fault
  311 00000290         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state



ARM Macro Assembler    Page 12 


  312 00000290         ; for examination by a debugger.
  313 00000290         ;
  314 00000290         ;*******************************************************
                       ***********************
  315 00000290         FaultISR
  316 00000290 E7FE            B                FaultISR
  317 00000292         
  318 00000292         ;*******************************************************
                       ***********************
  319 00000292         ;
  320 00000292         ; This is the code that gets called when the processor r
                       eceives an unexpected
  321 00000292         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  322 00000292         ; for examination by a debugger.
  323 00000292         ;
  324 00000292         ;*******************************************************
                       ***********************
  325 00000292         
  326 00000292         
  327 00000292         ;I added the SysTick_Handler here. This toggle GPIODATA 
                       so the LED blinks
  328 00000292         SysTick_Handler
                               PROC
  329 00000292         
  330 00000292                 EXPORT           SysTick_Handler
  331 00000292         
  332 00000292         ;write "high" to data register for port F pin 1 to turn 
                       on red LED. GPIODATA
  333 00000292 4865            LDR              r0, =AHB_PORTB
  334 00000294 4963            LDR              r1, =PB5_MASK ;Get RAM address 
                                                            of PB5 mask value
  335 00000296 680A            LDR              r2,[r1]     ;Grab value of PB5 
                                                            mask
  336 00000298 F082 0220       EOR              r2, r2, #GPIOP5 ;#0x20;#0xF0 ;T
                                                            oggle mas to toggle
                                                             PB5
  337 0000029C 600A            STR              r2,[r1]     ;Store the toggled 
                                                            mask to properly to
                                                            ggle next time
  338 0000029E F8C0 2080       STR              r2,[r0,#GPIODATAPB5]
  339 000002A2         ;LDR r2,[r0,#GPIODATAPB5]
  340 000002A2         
  341 000002A2         ;return to __main
  342 000002A2 4770            BX               LR
  343 000002A4         
  344 000002A4                 ENDP
  345 000002A4         
  346 000002A4         
  347 000002A4         
  348 000002A4         IntDefaultHandler
  349 000002A4 E7FE            B                IntDefaultHandler
  350 000002A6         
  351 000002A6         
  352 000002A6         ;I added the Timer0A_Handler here. 
  353 000002A6         Timer0A_Handler
                               PROC
  354 000002A6         
  355 000002A6                 EXPORT           Timer0A_Handler



ARM Macro Assembler    Page 13 


  356 000002A6         
  357 000002A6         ;write "high" to data register for port F pin 1 to turn 
                       on red LED. GPIODATA
  358 000002A6 4860            LDR              r0, =AHB_PORTB
  359 000002A8 495E            LDR              r1, =PB5_MASK ;Get RAM address 
                                                            of PB5 mask value
  360 000002AA 680A            LDR              r2,[r1]     ;Grab value of PB5 
                                                            mask
  361 000002AC F082 0220       EOR              r2, r2, #GPIOP5 ;#0x20;#0xF0 ;T
                                                            oggle mas to toggle
                                                             PB5
  362 000002B0 600A            STR              r2,[r1]     ;Store the toggled 
                                                            mask to properly to
                                                            ggle next time
  363 000002B2 F8C0 2080       STR              r2,[r0,#GPIODATAPB5]
  364 000002B6         ;LDR r2,[r0,#GPIODATAPB5]
  365 000002B6         
  366 000002B6         
  367 000002B6         ;Clear RIS bit
  368 000002B6 485D            LDR              r0, =TIMER16_0
  369 000002B8 6A41            LDR              r1,[r0, #GPTMICR]
  370 000002BA         
  371 000002BA F36F 0100       BFC              r1,#0,#1
  372 000002BE F041 0101       ORR              r1,r1,#1
  373 000002C2         
  374 000002C2 6241            STR              r1,[r0, #GPTMICR]
  375 000002C4         
  376 000002C4         ;return to __main
  377 000002C4 4770            BX               LR
  378 000002C6         
  379 000002C6                 ENDP
  380 000002C6         
  381 000002C6         Timer4A_Handler
                               PROC
  382 000002C6                 EXPORT           Timer4A_Handler
  383 000002C6         
  384 000002C6         ;write "high" to data register for port F pin 1 to turn 
                       on red LED. GPIODATA
  385 000002C6 4858            LDR              r0, =AHB_PORTB
  386 000002C8 4956            LDR              r1, =PB5_MASK ;Get RAM address 
                                                            of PB5 mask value
  387 000002CA 680A            LDR              r2,[r1]     ;Grab value of PB5 
                                                            mask
  388 000002CC F082 0220       EOR              r2, r2, #GPIOP5 ;#0x20;#0xF0 ;T
                                                            oggle mas to toggle
                                                             PB5
  389 000002D0 600A            STR              r2,[r1]     ;Store the toggled 
                                                            mask to properly to
                                                            ggle next time
  390 000002D2 F8C0 2080       STR              r2,[r0,#GPIODATAPB5]
  391 000002D6         ;LDR r2,[r0,#GPIODATAPB5]
  392 000002D6         
  393 000002D6         
  394 000002D6         ;Clear RIS bit
  395 000002D6 4856            LDR              r0, =SYS_CONTROL
  396 000002D8 6A41            LDR              r1,[r0, #GPTMICR]
  397 000002DA         
  398 000002DA F36F 0100       BFC              r1,#0,#1
  399 000002DE F041 0101       ORR              r1,r1,#1



ARM Macro Assembler    Page 14 


  400 000002E2         
  401 000002E2 6241            STR              r1,[r0, #GPTMICR]
  402 000002E4         
  403 000002E4         ;return to __main
  404 000002E4 4770            BX               LR
  405 000002E6         
  406 000002E6                 ENDP
  407 000002E6         
  408 000002E6         Timer4B_Handler
                               PROC
  409 000002E6                 EXPORT           Timer4B_Handler
  410 000002E6         
  411 000002E6         ;write "high" to data register for port F pin 1 to turn 
                       on red LED. GPIODATA
  412 000002E6 4850            LDR              r0, =AHB_PORTB
  413 000002E8 494E            LDR              r1, =PB5_MASK ;Get RAM address 
                                                            of PB5 mask value
  414 000002EA 680A            LDR              r2,[r1]     ;Grab value of PB5 
                                                            mask
  415 000002EC F082 0220       EOR              r2, r2, #GPIOP5 ;#0x20;#0xF0 ;T
                                                            oggle mas to toggle
                                                             PB5
  416 000002F0 600A            STR              r2,[r1]     ;Store the toggled 
                                                            mask to properly to
                                                            ggle next time
  417 000002F2 F8C0 2080       STR              r2,[r0,#GPIODATAPB5]
  418 000002F6         ;LDR r2,[r0,#GPIODATAPB5]
  419 000002F6         
  420 000002F6         
  421 000002F6         ;Clear RIS bit
  422 000002F6 484E            LDR              r0, =SYS_CONTROL
  423 000002F8 6A41            LDR              r1,[r0, #GPTMICR]
  424 000002FA         
  425 000002FA F36F 0100       BFC              r1,#0,#1
  426 000002FE F041 0101       ORR              r1,r1,#1
  427 00000302         
  428 00000302 6241            STR              r1,[r0, #GPTMICR]
  429 00000304         
  430 00000304         ;return to __main
  431 00000304 4770            BX               LR
  432 00000306         
  433 00000306                 ENDP
  434 00000306         
  435 00000306         ;I added the UART0 handler here
  436 00000306         UART0_Handler
                               PROC
  437 00000306                 EXPORT           UART0_Handler
  438 00000306         ;Save context
  439 00000306 B470            PUSH             {r4,r5,r6}  ;Add more registers
                                                             if you'll be using
                                                             more
  440 00000308         
  441 00000308         ;Load UARTMIS to check for conditions
  442 00000308 484A            LDR              r0, =UART0
  443 0000030A 6C01            LDR              r1,[r0, #UARTMIS]
  444 0000030C         
  445 0000030C         ;Rx Time out condition
  446 0000030C F001 0240       AND              r2,r1,#(1<<6)
  447 00000310 EA4F 1292       LSR              r2,r2,#6



ARM Macro Assembler    Page 15 


  448 00000314         
  449 00000314         ;TxFIFO condition
  450 00000314 F001 0320       AND              r3,r1,#(1<<5)
  451 00000318 EA4F 1353       LSR              r3,r3,#5
  452 0000031C         
  453 0000031C         ;RxFIFO condition
  454 0000031C F001 0410       AND              r4,r1,#(1<<4)
  455 00000320 EA4F 1414       LSR              r4,r4,#4
  456 00000324         
  457 00000324         ;Rx Time out interrupt
  458 00000324 2A01            CMP              r2,#1
  459 00000326 D003            BEQ              RTISR0
  460 00000328         
  461 00000328         ;TxFIFO interrupt
  462 00000328 2B01            CMP              r3,#1
  463 0000032A D011            BEQ              TxFIFOISR0
  464 0000032C         
  465 0000032C         ;RxFIFO interrupt
  466 0000032C 2C01            CMP              r4,#1
  467 0000032E D018            BEQ              RxFIFOISR0
  468 00000330         
  469 00000330         ;Services the interrupt caused by a time out
  470 00000330         RTISR0
  471 00000330         ;Write a '??' character to send at time out
  472 00000330 4840            LDR              r0, =UART0
  473 00000332         
  474 00000332         ;The '?' character
  475 00000332 F04F 013F       MOV              r1,#0x3F
  476 00000336 F04F 023F       MOV              r2,#0x3F
  477 0000033A         
  478 0000033A         ;Write '??' to UARTDR
  479 0000033A 6001            STR              r1,[r0, #UARTDR]
  480 0000033C 6002            STR              r2,[r0, #UARTDR]
  481 0000033E         
  482 0000033E         ;Clear RIS bit
  483 0000033E 483D            LDR              r0, =UART0
  484 00000340 6C41            LDR              r1,[r0, #UARTICR]
  485 00000342 F36F 1186       BFC              r1,#6,#1
  486 00000346 F041 0140       ORR              r1,r1,#(1<<6)
  487 0000034A 6441            STR              r1,[r0, #UARTICR]
  488 0000034C         
  489 0000034C         ;Restore context
  490 0000034C BC70            POP              {r4,r5,r6}  ;Add more registers
                                                             if you'll be using
                                                             more
  491 0000034E         
  492 0000034E 4770            BX               LR
  493 00000350         
  494 00000350         ;Services the interrupt caused by a TxFIFO
  495 00000350         TxFIFOISR0
  496 00000350         ;Write actions here
  497 00000350         
  498 00000350         ;Clear RIS bit
  499 00000350 4838            LDR              r0, =UART0
  500 00000352 6C41            LDR              r1,[r0, #UARTICR]
  501 00000354 F36F 1145       BFC              r1,#5,#1
  502 00000358 F041 0120       ORR              r1,r1,#(1<<5)
  503 0000035C 6441            STR              r1,[r0, #UARTICR]
  504 0000035E         



ARM Macro Assembler    Page 16 


  505 0000035E         ;Restore context
  506 0000035E BC70            POP              {r4,r5,r6}  ;Add more registers
                                                             if you'll be using
                                                             more
  507 00000360         
  508 00000360 4770            BX               LR
  509 00000362         
  510 00000362         ;Services the interrupt caused by RxFIFO
  511 00000362         RxFIFOISR0
  512 00000362         ;Read from RxFIFO via UARTDR
  513 00000362 4834            LDR              r0, =UART0
  514 00000364 6801            LDR              r1,[r0, #UARTDR] ;First byte
  515 00000366 6802            LDR              r2,[r0, #UARTDR] ;Second byte
  516 00000368         
  517 00000368         ;In case bits need to be reversed
  518 00000368 FA93 F2A3       RBIT             r2, r3
  519 0000036C         
  520 0000036C         ;If r2 = 'o' (lower case)
  521 0000036C 2A6F            CMP              r2,#0x6F
  522 0000036E D107            BNE              RxFIFOISR0_cont
  523 00000370         
  524 00000370         ;write "high" to data register for port F pin 1 to turn 
                       on red LED. GPIODATA
  525 00000370 482D            LDR              r0, =AHB_PORTB
  526 00000372 492C            LDR              r1, =PB5_MASK ;Get RAM address 
                                                            of PB5 mask value
  527 00000374 680A            LDR              r2,[r1]     ;Grab value of PB5 
                                                            mask
  528 00000376 F082 0220       EOR              r2, r2, #GPIOP5 ;#0x20;#0xF0 ;T
                                                            oggle mas to toggle
                                                             PB5
  529 0000037A 600A            STR              r2,[r1]     ;Store the toggled 
                                                            mask to properly to
                                                            ggle next time
  530 0000037C F8C0 2080       STR              r2,[r0,#GPIODATAPB5]
  531 00000380         
  532 00000380         RxFIFOISR0_cont
  533 00000380         ;Clear RIS bit
  534 00000380 482C            LDR              r0, =UART0
  535 00000382 6C41            LDR              r1,[r0, #UARTICR]
  536 00000384 F36F 1104       BFC              r1,#4,#1
  537 00000388 F041 0110       ORR              r1,r1,#(1<<4)
  538 0000038C 6441            STR              r1,[r0, #UARTICR]
  539 0000038E         
  540 0000038E         ;Restore context
  541 0000038E BC70            POP              {r4,r5,r6}  ;Add more registers
                                                             if you'll be using
                                                             more
  542 00000390         
  543 00000390 4770            BX               LR
  544 00000392         
  545 00000392                 ENDP
  546 00000392         
  547 00000392         ;I added the UART1 handler here
  548 00000392         UART1_Handler
                               PROC
  549 00000392                 EXPORT           UART1_Handler
  550 00000392         ;Save context
  551 00000392 B470            PUSH             {r4,r5,r6}  ;Add more registers



ARM Macro Assembler    Page 17 


                                                             if you'll be using
                                                             more
  552 00000394         
  553 00000394         ;Load UARTMIS to check for conditions
  554 00000394 4828            LDR              r0, =UART1
  555 00000396 6C01            LDR              r1,[r0, #UARTMIS]
  556 00000398         
  557 00000398         ;Rx Time out condition
  558 00000398 F001 0240       AND              r2,r1,#(1<<6)
  559 0000039C EA4F 1292       LSR              r2,r2,#6
  560 000003A0         
  561 000003A0         ;TxFIFO condition
  562 000003A0 F001 0320       AND              r3,r1,#(1<<5)
  563 000003A4 EA4F 1353       LSR              r3,r3,#5
  564 000003A8         
  565 000003A8         ;RxFIFO condition
  566 000003A8 F001 0410       AND              r4,r1,#(1<<4)
  567 000003AC EA4F 1414       LSR              r4,r4,#4
  568 000003B0         
  569 000003B0         ;TxFIFO interrupt
  570 000003B0 2B01            CMP              r3,#1
  571 000003B2 D013            BEQ              TxFIFOISR1
  572 000003B4         
  573 000003B4         ;RxFIFO interrupt
  574 000003B4 2C01            CMP              r4,#1
  575 000003B6 D01A            BEQ              RxFIFOISR1
  576 000003B8         
  577 000003B8         ;Rx Time out interrupt
  578 000003B8 2A01            CMP              r2,#1
  579 000003BA D0FF            BEQ              RTISR1
  580 000003BC         
  581 000003BC         ;Services the interrupt caused by a time out
  582 000003BC         RTISR1
  583 000003BC         ;Write a '??' character to send at time out
  584 000003BC 481E            LDR              r0, =UART1
  585 000003BE         
  586 000003BE         ;The '?' character
  587 000003BE F04F 013F       MOV              r1,#0x3F
  588 000003C2 F04F 023F       MOV              r2,#0x3F
  589 000003C6         
  590 000003C6         ;Write '??' to UARTDR
  591 000003C6 6001            STR              r1,[r0, #UARTDR]
  592 000003C8 6002            STR              r2,[r0, #UARTDR]
  593 000003CA         
  594 000003CA         ;Clear RIS bit
  595 000003CA 481B            LDR              r0, =UART1
  596 000003CC 6C41            LDR              r1,[r0, #UARTICR]
  597 000003CE F36F 1186       BFC              r1,#6,#1
  598 000003D2 F041 0140       ORR              r1,r1,#(1<<6)
  599 000003D6 6441            STR              r1,[r0, #UARTICR]
  600 000003D8         
  601 000003D8         ;Restore context
  602 000003D8 BC70            POP              {r4,r5,r6}  ;Add more registers
                                                             if you'll be using
                                                             more
  603 000003DA         
  604 000003DA 4770            BX               LR
  605 000003DC         
  606 000003DC         ;Services the interrupt caused by a TxFIFO



ARM Macro Assembler    Page 18 


  607 000003DC         TxFIFOISR1
  608 000003DC         ;Write actions here
  609 000003DC         
  610 000003DC         ;Clear RIS bit
  611 000003DC 4816            LDR              r0, =UART1
  612 000003DE 6C41            LDR              r1,[r0, #UARTICR]
  613 000003E0 F36F 1145       BFC              r1,#5,#1
  614 000003E4 F041 0120       ORR              r1,r1,#(1<<5)
  615 000003E8 6441            STR              r1,[r0, #UARTICR]
  616 000003EA         
  617 000003EA         ;Restore context
  618 000003EA BC70            POP              {r4,r5,r6}  ;Add more registers
                                                             if you'll be using
                                                             more
  619 000003EC         
  620 000003EC 4770            BX               LR
  621 000003EE         
  622 000003EE         ;Services the interrupt caused by RxFIFO
  623 000003EE         RxFIFOISR1
  624 000003EE         ;Read from RxFIFO via UARTDR
  625 000003EE 4812            LDR              r0, =UART1
  626 000003F0 6801            LDR              r1,[r0, #UARTDR] ;First byte (p
                                                            lus 4 bits of flags
                                                            )
  627 000003F2 6802            LDR              r2,[r0, #UARTDR] ;Second byte (
                                                            plus 4 bits of flag
                                                            s)
  628 000003F4         
  629 000003F4         ;This is not necessary. Bits come in in the correct posi
                       tion
  630 000003F4         ;In case bits need to be reversed
  631 000003F4         ;RBIT r3,r1
  632 000003F4         ;RBIT r4,r2
  633 000003F4         
  634 000003F4         ;Clear 4 bit flags
  635 000003F4 F36F 230B       BFC              r3,#8,#4
  636 000003F8 F36F 240B       BFC              r4,#8,#4
  637 000003FC         
  638 000003FC         ;If r3 = 'o' (lower case)
  639 000003FC 2B6F            CMP              r3,#0x6F
  640 000003FE D107            BNE              RxFIFOISR_cont1
  641 00000400         
  642 00000400         ;write "high" to data register for port F pin 1 to turn 
                       on red LED. GPIODATA
  643 00000400 4809            LDR              r0, =AHB_PORTB
  644 00000402 4908            LDR              r1, =PB5_MASK ;Get RAM address 
                                                            of PB5 mask value
  645 00000404 680A            LDR              r2,[r1]     ;Grab value of PB5 
                                                            mask
  646 00000406 F082 0220       EOR              r2, r2, #GPIOP5 ;#0x20;#0xF0 ;T
                                                            oggle mas to toggle
                                                             PB5
  647 0000040A 600A            STR              r2,[r1]     ;Store the toggled 
                                                            mask to properly to
                                                            ggle next time
  648 0000040C F8C0 2080       STR              r2,[r0,#GPIODATAPB5]
  649 00000410         
  650 00000410         RxFIFOISR_cont1
  651 00000410         ;Clear RIS bit



ARM Macro Assembler    Page 19 


  652 00000410 4809            LDR              r0, =UART1
  653 00000412 6C41            LDR              r1,[r0, #UARTICR]
  654 00000414 F36F 1104       BFC              r1,#4,#1
  655 00000418 F041 0110       ORR              r1,r1,#(1<<4)
  656 0000041C 6441            STR              r1,[r0, #UARTICR]
  657 0000041E         
  658 0000041E         ;Restore context
  659 0000041E BC70            POP              {r4,r5,r6}  ;Add more registers
                                                             if you'll be using
                                                             more
  660 00000420         
  661 00000420 4770            BX               LR
  662 00000422         
  663 00000422                 ENDP
  664 00000422         
  665 00000422         
  666 00000422         
  667 00000422         
  668 00000422         
  669 00000422         ;*******************************************************
                       ***********************
  670 00000422         ;
  671 00000422         ; Make sure the end of this section is aligned.
  672 00000422         ;
  673 00000422         ;*******************************************************
                       ***********************
  674 00000422 00 00           ALIGN
  675 00000424         
  676 00000424         ;*******************************************************
                       ***********************
  677 00000424         ;
  678 00000424         ; Some code in the normal code section for initializing 
                       the heap and stack.
  679 00000424         ;
  680 00000424         ;*******************************************************
                       ***********************
  681 00000424 00000000 
              40059000 
              40030000 
              400FE000 
              4000C000 
              4000D000         AREA             |.text|, CODE, READONLY
  682 00000000         
  683 00000000         ;*******************************************************
                       ***********************
  684 00000000         ;
  685 00000000         ; The function expected of the C library startup code fo
                       r defining the stack
  686 00000000         ; and heap memory locations.  For the C library version 
                       of the startup code,
  687 00000000         ; provide this function so that the C library initializa
                       tion code can find out
  688 00000000         ; the location of the stack and heap.
  689 00000000         ;
  690 00000000         ;*******************************************************
                       ***********************
  691 00000000                 IF               :DEF: __MICROLIB
  696 00000000                 IMPORT           __use_two_region_memory
  697 00000000                 EXPORT           __user_initial_stackheap



ARM Macro Assembler    Page 20 


  698 00000000         __user_initial_stackheap
  699 00000000 4802            LDR              R0, =HeapMem
  700 00000002 4903            LDR              R1, =(StackMem + Stack)
  701 00000004 4A01            LDR              R2, =(HeapMem + Heap)
  702 00000006 4B03            LDR              R3, =StackMem
  703 00000008 4770            BX               LR
  704 0000000A                 ENDIF
  705 0000000A         
  706 0000000A         ;*******************************************************
                       ***********************
  707 0000000A         ;
  708 0000000A         ; Make sure the end of this section is aligned.
  709 0000000A         ;
  710 0000000A         ;*******************************************************
                       ***********************
  711 0000000A 00 00           ALIGN
  712 0000000C         
  713 0000000C         ;*******************************************************
                       ***********************
  714 0000000C         ;
  715 0000000C         ; Tell the assembler that we're done.
  716 0000000C         ;
  717 0000000C         ;*******************************************************
                       ***********************
  718 0000000C                 END
              00000000 
              00000200 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\startup_rvmdk.d -o.\objects\startup_rvmdk.o -IC:\ti\T
ivaWare_C_Series-2.1.4.178\examples\boards\my_projects\project4\RTE -IC:\Keil_v
5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\ARM\CMSIS\In
clude --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 521" --pr
edefine="TM4C123GH6PM SETA 1" --list=.\listings\startup_rvmdk.lst startup_rvmdk
.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

My_Constants 00000000

Symbol: My_Constants
   Definitions
      At line 1 in file my_Constants.s
   Uses
      None
Comment: My_Constants unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 59 in file startup_rvmdk.S
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 60 in file startup_rvmdk.S
   Uses
      At line 97 in file startup_rvmdk.S
      At line 700 in file startup_rvmdk.S
      At line 702 in file startup_rvmdk.S

__initial_sp 00000200

Symbol: __initial_sp
   Definitions
      At line 62 in file startup_rvmdk.S
   Uses
      None
Comment: __initial_sp unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 69 in file startup_rvmdk.S
   Uses
      None
Comment: HEAP unused
HeapMem 00000000

Symbol: HeapMem
   Definitions
      At line 71 in file startup_rvmdk.S
   Uses
      At line 699 in file startup_rvmdk.S
      At line 701 in file startup_rvmdk.S

__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 70 in file startup_rvmdk.S
   Uses
      None
Comment: __heap_base unused
__heap_limit 00000000

Symbol: __heap_limit
   Definitions
      At line 73 in file startup_rvmdk.S
   Uses
      None
Comment: __heap_limit unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FaultISR 00000290

Symbol: FaultISR
   Definitions
      At line 315 in file startup_rvmdk.S
   Uses
      At line 100 in file startup_rvmdk.S
      At line 316 in file startup_rvmdk.S

IntDefaultHandler 000002A4

Symbol: IntDefaultHandler
   Definitions
      At line 348 in file startup_rvmdk.S
   Uses
      At line 101 in file startup_rvmdk.S
      At line 102 in file startup_rvmdk.S
      At line 103 in file startup_rvmdk.S
      At line 108 in file startup_rvmdk.S
      At line 109 in file startup_rvmdk.S
      At line 111 in file startup_rvmdk.S
      At line 113 in file startup_rvmdk.S
      At line 114 in file startup_rvmdk.S
      At line 115 in file startup_rvmdk.S
      At line 116 in file startup_rvmdk.S
      At line 117 in file startup_rvmdk.S
      At line 120 in file startup_rvmdk.S
      At line 121 in file startup_rvmdk.S
      At line 122 in file startup_rvmdk.S
      At line 123 in file startup_rvmdk.S
      At line 124 in file startup_rvmdk.S
      At line 125 in file startup_rvmdk.S
      At line 126 in file startup_rvmdk.S
      At line 127 in file startup_rvmdk.S
      At line 128 in file startup_rvmdk.S
      At line 129 in file startup_rvmdk.S
      At line 130 in file startup_rvmdk.S
      At line 131 in file startup_rvmdk.S
      At line 133 in file startup_rvmdk.S
      At line 134 in file startup_rvmdk.S
      At line 135 in file startup_rvmdk.S
      At line 136 in file startup_rvmdk.S
      At line 137 in file startup_rvmdk.S
      At line 138 in file startup_rvmdk.S
      At line 139 in file startup_rvmdk.S
      At line 140 in file startup_rvmdk.S
      At line 141 in file startup_rvmdk.S
      At line 142 in file startup_rvmdk.S
      At line 143 in file startup_rvmdk.S
      At line 144 in file startup_rvmdk.S
      At line 145 in file startup_rvmdk.S
      At line 146 in file startup_rvmdk.S
      At line 147 in file startup_rvmdk.S
      At line 148 in file startup_rvmdk.S
      At line 149 in file startup_rvmdk.S
      At line 150 in file startup_rvmdk.S
      At line 151 in file startup_rvmdk.S
      At line 152 in file startup_rvmdk.S
      At line 153 in file startup_rvmdk.S



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 156 in file startup_rvmdk.S
      At line 157 in file startup_rvmdk.S
      At line 158 in file startup_rvmdk.S
      At line 159 in file startup_rvmdk.S
      At line 160 in file startup_rvmdk.S
      At line 161 in file startup_rvmdk.S
      At line 162 in file startup_rvmdk.S
      At line 163 in file startup_rvmdk.S
      At line 164 in file startup_rvmdk.S
      At line 167 in file startup_rvmdk.S
      At line 168 in file startup_rvmdk.S
      At line 169 in file startup_rvmdk.S
      At line 170 in file startup_rvmdk.S
      At line 171 in file startup_rvmdk.S
      At line 172 in file startup_rvmdk.S
      At line 173 in file startup_rvmdk.S
      At line 174 in file startup_rvmdk.S
      At line 175 in file startup_rvmdk.S
      At line 176 in file startup_rvmdk.S
      At line 181 in file startup_rvmdk.S
      At line 182 in file startup_rvmdk.S
      At line 205 in file startup_rvmdk.S
      At line 206 in file startup_rvmdk.S
      At line 207 in file startup_rvmdk.S
      At line 208 in file startup_rvmdk.S
      At line 209 in file startup_rvmdk.S
      At line 210 in file startup_rvmdk.S
      At line 211 in file startup_rvmdk.S
      At line 212 in file startup_rvmdk.S
      At line 213 in file startup_rvmdk.S
      At line 214 in file startup_rvmdk.S
      At line 215 in file startup_rvmdk.S
      At line 216 in file startup_rvmdk.S
      At line 217 in file startup_rvmdk.S
      At line 218 in file startup_rvmdk.S
      At line 219 in file startup_rvmdk.S
      At line 222 in file startup_rvmdk.S
      At line 223 in file startup_rvmdk.S
      At line 224 in file startup_rvmdk.S
      At line 225 in file startup_rvmdk.S
      At line 226 in file startup_rvmdk.S
      At line 229 in file startup_rvmdk.S
      At line 230 in file startup_rvmdk.S
      At line 231 in file startup_rvmdk.S
      At line 232 in file startup_rvmdk.S
      At line 233 in file startup_rvmdk.S
      At line 234 in file startup_rvmdk.S
      At line 235 in file startup_rvmdk.S
      At line 236 in file startup_rvmdk.S
      At line 237 in file startup_rvmdk.S
      At line 238 in file startup_rvmdk.S
      At line 239 in file startup_rvmdk.S
      At line 240 in file startup_rvmdk.S
      At line 241 in file startup_rvmdk.S
      At line 242 in file startup_rvmdk.S
      At line 243 in file startup_rvmdk.S
      At line 244 in file startup_rvmdk.S
      At line 245 in file startup_rvmdk.S
      At line 246 in file startup_rvmdk.S



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 247 in file startup_rvmdk.S
      At line 248 in file startup_rvmdk.S
      At line 249 in file startup_rvmdk.S
      At line 250 in file startup_rvmdk.S
      At line 251 in file startup_rvmdk.S
      At line 349 in file startup_rvmdk.S

NmiSR 0000028E

Symbol: NmiSR
   Definitions
      At line 305 in file startup_rvmdk.S
   Uses
      At line 99 in file startup_rvmdk.S
      At line 306 in file startup_rvmdk.S

RESET 00000000

Symbol: RESET
   Definitions
      At line 87 in file startup_rvmdk.S
   Uses
      None
Comment: RESET unused
RTISR0 00000330

Symbol: RTISR0
   Definitions
      At line 470 in file startup_rvmdk.S
   Uses
      At line 459 in file startup_rvmdk.S
Comment: RTISR0 used once
RTISR1 000003BC

Symbol: RTISR1
   Definitions
      At line 582 in file startup_rvmdk.S
   Uses
      At line 579 in file startup_rvmdk.S
Comment: RTISR1 used once
Reset_Handler 0000026C

Symbol: Reset_Handler
   Definitions
      At line 260 in file startup_rvmdk.S
   Uses
      At line 98 in file startup_rvmdk.S
      At line 259 in file startup_rvmdk.S

RxFIFOISR0 00000362

Symbol: RxFIFOISR0
   Definitions
      At line 511 in file startup_rvmdk.S
   Uses
      At line 467 in file startup_rvmdk.S
Comment: RxFIFOISR0 used once
RxFIFOISR0_cont 00000380




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: RxFIFOISR0_cont
   Definitions
      At line 532 in file startup_rvmdk.S
   Uses
      At line 522 in file startup_rvmdk.S
Comment: RxFIFOISR0_cont used once
RxFIFOISR1 000003EE

Symbol: RxFIFOISR1
   Definitions
      At line 623 in file startup_rvmdk.S
   Uses
      At line 575 in file startup_rvmdk.S
Comment: RxFIFOISR1 used once
RxFIFOISR_cont1 00000410

Symbol: RxFIFOISR_cont1
   Definitions
      At line 650 in file startup_rvmdk.S
   Uses
      At line 640 in file startup_rvmdk.S
Comment: RxFIFOISR_cont1 used once
SysTick_Handler 00000292

Symbol: SysTick_Handler
   Definitions
      At line 328 in file startup_rvmdk.S
   Uses
      At line 112 in file startup_rvmdk.S
      At line 330 in file startup_rvmdk.S

Timer0A_Handler 000002A6

Symbol: Timer0A_Handler
   Definitions
      At line 353 in file startup_rvmdk.S
   Uses
      At line 132 in file startup_rvmdk.S
      At line 355 in file startup_rvmdk.S

Timer4A_Handler 000002C6

Symbol: Timer4A_Handler
   Definitions
      At line 381 in file startup_rvmdk.S
   Uses
      At line 183 in file startup_rvmdk.S
      At line 382 in file startup_rvmdk.S

Timer4B_Handler 000002E6

Symbol: Timer4B_Handler
   Definitions
      At line 408 in file startup_rvmdk.S
   Uses
      At line 184 in file startup_rvmdk.S
      At line 409 in file startup_rvmdk.S

TxFIFOISR0 00000350



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: TxFIFOISR0
   Definitions
      At line 495 in file startup_rvmdk.S
   Uses
      At line 463 in file startup_rvmdk.S
Comment: TxFIFOISR0 used once
TxFIFOISR1 000003DC

Symbol: TxFIFOISR1
   Definitions
      At line 607 in file startup_rvmdk.S
   Uses
      At line 571 in file startup_rvmdk.S
Comment: TxFIFOISR1 used once
UART0_Handler 00000306

Symbol: UART0_Handler
   Definitions
      At line 436 in file startup_rvmdk.S
   Uses
      At line 118 in file startup_rvmdk.S
      At line 437 in file startup_rvmdk.S

UART1_Handler 00000392

Symbol: UART1_Handler
   Definitions
      At line 548 in file startup_rvmdk.S
   Uses
      At line 119 in file startup_rvmdk.S
      At line 549 in file startup_rvmdk.S

__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 96 in file startup_rvmdk.S
   Uses
      At line 95 in file startup_rvmdk.S
Comment: __Vectors used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 681 in file startup_rvmdk.S
   Uses
      None
Comment: .text unused
__user_initial_stackheap 00000000

Symbol: __user_initial_stackheap
   Definitions
      At line 698 in file startup_rvmdk.S
   Uses
      At line 697 in file startup_rvmdk.S
Comment: __user_initial_stackheap used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

AHB_PORTA 40058000

Symbol: AHB_PORTA
   Definitions
      At line 8 in file my_Constants.s
   Uses
      None
Comment: AHB_PORTA unused
AHB_PORTB 40059000

Symbol: AHB_PORTB
   Definitions
      At line 7 in file my_Constants.s
   Uses
      At line 333 in file startup_rvmdk.S
      At line 358 in file startup_rvmdk.S
      At line 385 in file startup_rvmdk.S
      At line 412 in file startup_rvmdk.S
      At line 525 in file startup_rvmdk.S
      At line 643 in file startup_rvmdk.S

FAIL 00000000

Symbol: FAIL
   Definitions
      At line 76 in file my_Constants.s
   Uses
      None
Comment: FAIL unused
GPIOAFSEL 00000420

Symbol: GPIOAFSEL
   Definitions
      At line 25 in file my_Constants.s
   Uses
      None
Comment: GPIOAFSEL unused
GPIOCTL 0000052C

Symbol: GPIOCTL
   Definitions
      At line 23 in file my_Constants.s
   Uses
      None
Comment: GPIOCTL unused
GPIODATAPB5 00000080

Symbol: GPIODATAPB5
   Definitions
      At line 30 in file my_Constants.s
   Uses
      At line 338 in file startup_rvmdk.S
      At line 363 in file startup_rvmdk.S
      At line 390 in file startup_rvmdk.S
      At line 417 in file startup_rvmdk.S
      At line 530 in file startup_rvmdk.S
      At line 648 in file startup_rvmdk.S

GPIODEN 0000051C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIODEN
   Definitions
      At line 28 in file my_Constants.s
   Uses
      None
Comment: GPIODEN unused
GPIODIR 00000400

Symbol: GPIODIR
   Definitions
      At line 24 in file my_Constants.s
   Uses
      None
Comment: GPIODIR unused
GPIODR2R 00000500

Symbol: GPIODR2R
   Definitions
      At line 26 in file my_Constants.s
   Uses
      None
Comment: GPIODR2R unused
GPIOHBCTL 0000006C

Symbol: GPIOHBCTL
   Definitions
      At line 22 in file my_Constants.s
   Uses
      None
Comment: GPIOHBCTL unused
GPIOP5 00000020

Symbol: GPIOP5
   Definitions
      At line 79 in file my_Constants.s
   Uses
      At line 336 in file startup_rvmdk.S
      At line 361 in file startup_rvmdk.S
      At line 388 in file startup_rvmdk.S
      At line 415 in file startup_rvmdk.S
      At line 528 in file startup_rvmdk.S
      At line 646 in file startup_rvmdk.S

GPIOPCTL 0000052C

Symbol: GPIOPCTL
   Definitions
      At line 29 in file my_Constants.s
   Uses
      None
Comment: GPIOPCTL unused
GPIOPUR 00000510

Symbol: GPIOPUR
   Definitions
      At line 27 in file my_Constants.s
   Uses
      None



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Comment: GPIOPUR unused
GPTMCFG 00000000

Symbol: GPTMCFG
   Definitions
      At line 42 in file my_Constants.s
   Uses
      None
Comment: GPTMCFG unused
GPTMCTL 0000000C

Symbol: GPTMCTL
   Definitions
      At line 41 in file my_Constants.s
   Uses
      None
Comment: GPTMCTL unused
GPTMICR 00000024

Symbol: GPTMICR
   Definitions
      At line 51 in file my_Constants.s
   Uses
      At line 369 in file startup_rvmdk.S
      At line 374 in file startup_rvmdk.S
      At line 396 in file startup_rvmdk.S
      At line 401 in file startup_rvmdk.S
      At line 423 in file startup_rvmdk.S
      At line 428 in file startup_rvmdk.S

GPTMIMR 00000018

Symbol: GPTMIMR
   Definitions
      At line 49 in file my_Constants.s
   Uses
      None
Comment: GPTMIMR unused
GPTMMIS 00000020

Symbol: GPTMMIS
   Definitions
      At line 56 in file my_Constants.s
   Uses
      None
Comment: GPTMMIS unused
GPTMRIS 0000001C

Symbol: GPTMRIS
   Definitions
      At line 50 in file my_Constants.s
   Uses
      None
Comment: GPTMRIS unused
GPTMTAILR 00000028

Symbol: GPTMTAILR
   Definitions
      At line 45 in file my_Constants.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: GPTMTAILR unused
GPTMTAMR 00000004

Symbol: GPTMTAMR
   Definitions
      At line 43 in file my_Constants.s
   Uses
      None
Comment: GPTMTAMR unused
GPTMTAPR 00000038

Symbol: GPTMTAPR
   Definitions
      At line 47 in file my_Constants.s
   Uses
      None
Comment: GPTMTAPR unused
GPTMTAR 00000048

Symbol: GPTMTAR
   Definitions
      At line 54 in file my_Constants.s
   Uses
      None
Comment: GPTMTAR unused
GPTMTAV 00000050

Symbol: GPTMTAV
   Definitions
      At line 52 in file my_Constants.s
   Uses
      None
Comment: GPTMTAV unused
GPTMTBILR 0000002C

Symbol: GPTMTBILR
   Definitions
      At line 46 in file my_Constants.s
   Uses
      None
Comment: GPTMTBILR unused
GPTMTBMR 00000008

Symbol: GPTMTBMR
   Definitions
      At line 44 in file my_Constants.s
   Uses
      None
Comment: GPTMTBMR unused
GPTMTBPR 0000003C

Symbol: GPTMTBPR
   Definitions
      At line 48 in file my_Constants.s
   Uses
      None
Comment: GPTMTBPR unused



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

GPTMTBR 0000004C

Symbol: GPTMTBR
   Definitions
      At line 55 in file my_Constants.s
   Uses
      None
Comment: GPTMTBR unused
GPTMTBV 00000054

Symbol: GPTMTBV
   Definitions
      At line 53 in file my_Constants.s
   Uses
      None
Comment: GPTMTBV unused
Heap 00000000

Symbol: Heap
   Definitions
      At line 38 in file startup_rvmdk.S
   Uses
      At line 72 in file startup_rvmdk.S
      At line 701 in file startup_rvmdk.S

NVIC_DISn 00000180

Symbol: NVIC_DISn
   Definitions
      At line 38 in file my_Constants.s
   Uses
      None
Comment: NVIC_DISn unused
NVIC_ENn 00000100

Symbol: NVIC_ENn
   Definitions
      At line 37 in file my_Constants.s
   Uses
      None
Comment: NVIC_ENn unused
NVIC_PRIn 00000440

Symbol: NVIC_PRIn
   Definitions
      At line 39 in file my_Constants.s
   Uses
      None
Comment: NVIC_PRIn unused
RCGCGPIO 00000608

Symbol: RCGCGPIO
   Definitions
      At line 18 in file my_Constants.s
   Uses
      None
Comment: RCGCGPIO unused
RCGCTIMER 00000604




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: RCGCTIMER
   Definitions
      At line 19 in file my_Constants.s
   Uses
      None
Comment: RCGCTIMER unused
RCGCUART 00000618

Symbol: RCGCUART
   Definitions
      At line 20 in file my_Constants.s
   Uses
      None
Comment: RCGCUART unused
SIZE 00000010

Symbol: SIZE
   Definitions
      At line 74 in file my_Constants.s
   Uses
      None
Comment: SIZE unused
STCTRL 00000010

Symbol: STCTRL
   Definitions
      At line 32 in file my_Constants.s
   Uses
      None
Comment: STCTRL unused
STCURRENT 00000018

Symbol: STCURRENT
   Definitions
      At line 34 in file my_Constants.s
   Uses
      None
Comment: STCURRENT unused
STRELOAD 00000014

Symbol: STRELOAD
   Definitions
      At line 33 in file my_Constants.s
   Uses
      None
Comment: STRELOAD unused
SUCCESS 00000001

Symbol: SUCCESS
   Definitions
      At line 75 in file my_Constants.s
   Uses
      None
Comment: SUCCESS unused
SYSPRI3 00000D20

Symbol: SYSPRI3
   Definitions
      At line 35 in file my_Constants.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: SYSPRI3 unused
SYS_CONTROL 400FE000

Symbol: SYS_CONTROL
   Definitions
      At line 9 in file my_Constants.s
   Uses
      At line 395 in file startup_rvmdk.S
      At line 422 in file startup_rvmdk.S

SYS_PERIPH E000E000

Symbol: SYS_PERIPH
   Definitions
      At line 10 in file my_Constants.s
   Uses
      None
Comment: SYS_PERIPH unused
Stack 00000200

Symbol: Stack
   Definitions
      At line 31 in file startup_rvmdk.S
   Uses
      At line 61 in file startup_rvmdk.S
      At line 97 in file startup_rvmdk.S
      At line 700 in file startup_rvmdk.S

TIMER16_0 40030000

Symbol: TIMER16_0
   Definitions
      At line 11 in file my_Constants.s
   Uses
      At line 368 in file startup_rvmdk.S
Comment: TIMER16_0 used once
TIMER16_4 40034000

Symbol: TIMER16_4
   Definitions
      At line 12 in file my_Constants.s
   Uses
      None
Comment: TIMER16_4 unused
UART0 4000C000

Symbol: UART0
   Definitions
      At line 13 in file my_Constants.s
   Uses
      At line 442 in file startup_rvmdk.S
      At line 472 in file startup_rvmdk.S
      At line 483 in file startup_rvmdk.S
      At line 499 in file startup_rvmdk.S
      At line 513 in file startup_rvmdk.S
      At line 534 in file startup_rvmdk.S




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

UART1 4000D000

Symbol: UART1
   Definitions
      At line 14 in file my_Constants.s
   Uses
      At line 554 in file startup_rvmdk.S
      At line 584 in file startup_rvmdk.S
      At line 595 in file startup_rvmdk.S
      At line 611 in file startup_rvmdk.S
      At line 625 in file startup_rvmdk.S
      At line 652 in file startup_rvmdk.S

UARTCC 00000FC8

Symbol: UARTCC
   Definitions
      At line 58 in file my_Constants.s
   Uses
      None
Comment: UARTCC unused
UARTCTL 00000030

Symbol: UARTCTL
   Definitions
      At line 59 in file my_Constants.s
   Uses
      None
Comment: UARTCTL unused
UARTDR 00000000

Symbol: UARTDR
   Definitions
      At line 70 in file my_Constants.s
   Uses
      At line 479 in file startup_rvmdk.S
      At line 480 in file startup_rvmdk.S
      At line 514 in file startup_rvmdk.S
      At line 515 in file startup_rvmdk.S
      At line 591 in file startup_rvmdk.S
      At line 592 in file startup_rvmdk.S
      At line 626 in file startup_rvmdk.S
      At line 627 in file startup_rvmdk.S

UARTFBRD 00000028

Symbol: UARTFBRD
   Definitions
      At line 61 in file my_Constants.s
   Uses
      None
Comment: UARTFBRD unused
UARTFR 00000018

Symbol: UARTFR
   Definitions
      At line 63 in file my_Constants.s
   Uses
      None



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols

Comment: UARTFR unused
UARTIBRD 00000024

Symbol: UARTIBRD
   Definitions
      At line 60 in file my_Constants.s
   Uses
      None
Comment: UARTIBRD unused
UARTICR 00000044

Symbol: UARTICR
   Definitions
      At line 69 in file my_Constants.s
   Uses
      At line 484 in file startup_rvmdk.S
      At line 487 in file startup_rvmdk.S
      At line 500 in file startup_rvmdk.S
      At line 503 in file startup_rvmdk.S
      At line 535 in file startup_rvmdk.S
      At line 538 in file startup_rvmdk.S
      At line 596 in file startup_rvmdk.S
      At line 599 in file startup_rvmdk.S
      At line 612 in file startup_rvmdk.S
      At line 615 in file startup_rvmdk.S
      At line 653 in file startup_rvmdk.S
      At line 656 in file startup_rvmdk.S

UARTIFLS 00000034

Symbol: UARTIFLS
   Definitions
      At line 65 in file my_Constants.s
   Uses
      None
Comment: UARTIFLS unused
UARTIM 00000038

Symbol: UARTIM
   Definitions
      At line 67 in file my_Constants.s
   Uses
      None
Comment: UARTIM unused
UARTLCRH 0000002C

Symbol: UARTLCRH
   Definitions
      At line 62 in file my_Constants.s
   Uses
      None
Comment: UARTLCRH unused
UARTMIS 00000040

Symbol: UARTMIS
   Definitions
      At line 68 in file my_Constants.s
   Uses
      At line 443 in file startup_rvmdk.S



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Absolute symbols

      At line 555 in file startup_rvmdk.S

UARTRIS 0000003C

Symbol: UARTRIS
   Definitions
      At line 66 in file my_Constants.s
   Uses
      None
Comment: UARTRIS unused
UARTRSR 00000004

Symbol: UARTRSR
   Definitions
      At line 64 in file my_Constants.s
   Uses
      None
Comment: UARTRSR unused
62 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PB5_MASK 00000000

Symbol: PB5_MASK
   Definitions
      At line 51 in file startup_rvmdk.S
   Uses
      At line 286 in file startup_rvmdk.S
      At line 334 in file startup_rvmdk.S
      At line 359 in file startup_rvmdk.S
      At line 386 in file startup_rvmdk.S
      At line 413 in file startup_rvmdk.S
      At line 526 in file startup_rvmdk.S
      At line 644 in file startup_rvmdk.S

__main 00000000

Symbol: __main
   Definitions
      At line 295 in file startup_rvmdk.S
   Uses
      At line 296 in file startup_rvmdk.S
Comment: __main used once
__use_two_region_memory 00000000

Symbol: __use_two_region_memory
   Definitions
      At line 696 in file startup_rvmdk.S
   Uses
      None
Comment: __use_two_region_memory unused
3 symbols
435 symbols in table
